{"ast":null,"code":"var _jsxFileName = \"C:\\\\folder mata kuliah\\\\magang dot\\\\quiz-app-react\\\\src\\\\components\\\\Quiz.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Quiz = ({\n  questions\n}) => {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n\n  // Guard clause for loading state\n  if (!questions || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-container\",\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n  const handleAnswerClick = selectedAnswer => {\n    if (selectedAnswer === questions[currentQuestion].correctAnswer) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-section\",\n      children: [\"You scored \", score, \" out of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-count\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Question \", currentQuestion + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this), \"/\", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-text\",\n          children: questions[currentQuestion].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-section\",\n        children: questions[currentQuestion].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerClick(option),\n          className: \"answer-button\",\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"/sy2pvX1Q0450pE8xQIdkgXJpdM=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Quiz","questions","_s","currentQuestion","setCurrentQuestion","score","setScore","showScore","setShowScore","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerClick","selectedAnswer","correctAnswer","nextQuestion","question","options","map","option","index","onClick","_c","$RefreshReg$"],"sources":["C:/folder mata kuliah/magang dot/quiz-app-react/src/components/Quiz.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Question, QuizProps } from '../types/types';\n\nconst Quiz: React.FC<QuizProps> = ({ questions }) => {\n  const [currentQuestion, setCurrentQuestion] = useState<number>(0);\n  const [score, setScore] = useState<number>(0);\n  const [showScore, setShowScore] = useState<boolean>(false);\n\n  // Guard clause for loading state\n  if (!questions || questions.length === 0) {\n    return <div className=\"quiz-container\">Loading questions...</div>;\n  }\n\n  const handleAnswerClick = (selectedAnswer: string) => {\n    if (selectedAnswer === questions[currentQuestion].correctAnswer) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return (\n    <div className=\"quiz-container\">\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {questions.length}\n        </div>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">\n              {questions[currentQuestion].question}\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {questions[currentQuestion].options.map((option: string, index) => (\n              <button\n                key={index}\n                onClick={() => handleAnswerClick(option)}\n                className=\"answer-button\"\n              >\n                {option}\n              </button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}