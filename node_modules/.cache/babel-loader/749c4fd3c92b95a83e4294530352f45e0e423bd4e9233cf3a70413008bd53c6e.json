{"ast":null,"code":"const delay=ms=>new Promise(resolve=>setTimeout(resolve,ms));export const fetchQuizQuestions=async function(){let amount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;try{// Add delay to prevent rate limiting\nawait delay(1000);const response=await fetch(\"https://opentdb.com/api.php?amount=\".concat(amount,\"&category=9&difficulty=medium&type=multiple\"),{headers:{'Accept':'application/json'}});if(response.status===429){throw new Error('Too many requests. Please wait a moment and try again.');}if(!response.ok){throw new Error(\"Network response was not ok: \".concat(response.status));}const data=await response.json();if(data.response_code!==0||!data.results){throw new Error('Failed to fetch questions from API');}return data.results.map(question=>({id:Math.random(),question:decodeHTML(question.question),options:shuffleArray([...question.incorrect_answers,question.correct_answer].map(decodeHTML)),correctAnswer:decodeHTML(question.correct_answer)}));}catch(error){console.error('Failed to fetch:',error);throw error;}};const decodeHTML=html=>{const txt=document.createElement('textarea');txt.innerHTML=html;return txt.value;};const shuffleArray=array=>{return[...array].sort(()=>Math.random()-0.5);};","map":{"version":3,"names":["delay","ms","Promise","resolve","setTimeout","fetchQuizQuestions","amount","arguments","length","undefined","response","fetch","concat","headers","status","Error","ok","data","json","response_code","results","map","question","id","Math","random","decodeHTML","options","shuffleArray","incorrect_answers","correct_answer","correctAnswer","error","console","html","txt","document","createElement","innerHTML","value","array","sort"],"sources":["C:/folder mata kuliah/magang dot/quiz-app-react/src/service/quizService.ts"],"sourcesContent":["import { Question } from '../types';\r\n\r\ninterface OpenTDBResponse {\r\n  response_code: number;\r\n  results: {\r\n    category: string;\r\n    type: string;\r\n    difficulty: string;\r\n    question: string;\r\n    correct_answer: string;\r\n    incorrect_answers: string[];\r\n  }[];\r\n}\r\n\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const fetchQuizQuestions = async (amount: number = 10): Promise<Question[]> => {\r\n  try {\r\n    // Add delay to prevent rate limiting\r\n    await delay(1000);\r\n\r\n    const response = await fetch(\r\n      `https://opentdb.com/api.php?amount=${amount}&category=9&difficulty=medium&type=multiple`,\r\n      {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    \r\n    if (response.status === 429) {\r\n      throw new Error('Too many requests. Please wait a moment and try again.');\r\n    }\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Network response was not ok: ${response.status}`);\r\n    }\r\n\r\n    const data: OpenTDBResponse = await response.json();\r\n\r\n    if (data.response_code !== 0 || !data.results) {\r\n      throw new Error('Failed to fetch questions from API');\r\n    }\r\n\r\n    return data.results.map((question) => ({\r\n      id: Math.random(),\r\n      question: decodeHTML(question.question),\r\n      options: shuffleArray([\r\n        ...question.incorrect_answers,\r\n        question.correct_answer\r\n      ].map(decodeHTML)),\r\n      correctAnswer: decodeHTML(question.correct_answer)\r\n    }));\r\n  } catch (error) {\r\n    console.error('Failed to fetch:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst decodeHTML = (html: string): string => {\r\n  const txt = document.createElement('textarea');\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n\r\nconst shuffleArray = <T>(array: T[]): T[] => {\r\n  return [...array].sort(() => Math.random() - 0.5);\r\n};"],"mappings":"AAcA,KAAM,CAAAA,KAAK,CAAIC,EAAU,EAAK,GAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAEF,EAAE,CAAC,CAAC,CAE7E,MAAO,MAAM,CAAAI,kBAAkB,CAAG,cAAAA,CAAA,CAAoD,IAA7C,CAAAC,MAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC1D,GAAI,CACF;AACA,KAAM,CAAAP,KAAK,CAAC,IAAI,CAAC,CAEjB,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAC,KAAK,uCAAAC,MAAA,CACYN,MAAM,gDAC5C,CACEO,OAAO,CAAE,CACP,QAAQ,CAAE,kBACZ,CACF,CACF,CAAC,CAED,GAAIH,QAAQ,CAACI,MAAM,GAAK,GAAG,CAAE,CAC3B,KAAM,IAAI,CAAAC,KAAK,CAAC,wDAAwD,CAAC,CAC3E,CAEA,GAAI,CAACL,QAAQ,CAACM,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAD,KAAK,iCAAAH,MAAA,CAAiCF,QAAQ,CAACI,MAAM,CAAE,CAAC,CACpE,CAEA,KAAM,CAAAG,IAAqB,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAEnD,GAAID,IAAI,CAACE,aAAa,GAAK,CAAC,EAAI,CAACF,IAAI,CAACG,OAAO,CAAE,CAC7C,KAAM,IAAI,CAAAL,KAAK,CAAC,oCAAoC,CAAC,CACvD,CAEA,MAAO,CAAAE,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,QAAQ,GAAM,CACrCC,EAAE,CAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,CACjBH,QAAQ,CAAEI,UAAU,CAACJ,QAAQ,CAACA,QAAQ,CAAC,CACvCK,OAAO,CAAEC,YAAY,CAAC,CACpB,GAAGN,QAAQ,CAACO,iBAAiB,CAC7BP,QAAQ,CAACQ,cAAc,CACxB,CAACT,GAAG,CAACK,UAAU,CAAC,CAAC,CAClBK,aAAa,CAAEL,UAAU,CAACJ,QAAQ,CAACQ,cAAc,CACnD,CAAC,CAAC,CAAC,CACL,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAN,UAAU,CAAIQ,IAAY,EAAa,CAC3C,KAAM,CAAAC,GAAG,CAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC,CAC9CF,GAAG,CAACG,SAAS,CAAGJ,IAAI,CACpB,MAAO,CAAAC,GAAG,CAACI,KAAK,CAClB,CAAC,CAED,KAAM,CAAAX,YAAY,CAAOY,KAAU,EAAU,CAC3C,MAAO,CAAC,GAAGA,KAAK,CAAC,CAACC,IAAI,CAAC,IAAMjB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CACnD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}